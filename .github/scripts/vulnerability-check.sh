#!/bin/bash

# Comprobando si el token de GitHub está establecido
if [[ -z "${SECURITY_GITHUB}" ]]; then
    echo "ERROR: El token de GitHub no está establecido."
    exit 1
fi

# Lista de repositorios para comprobar
REPOSITORIES=("githubworkflowB" "githubworkflowA" "MarvelAngular" "rickymortyReactjs")

# Crear/Clear el archivo CSV
echo "Repository,Vulnerability Name,Severity,Package Name,Package Version" > vulnerabilities.csv

# Bucle a través de cada repositorio y recuperar las vulnerabilidades
for REPO in "${REPOSITORIES[@]}"; do
    echo "Checking $REPO"
    
   DATA=$(curl -s -H "Authorization: bearer $SECURITY_GITHUB" -X POST -d '{
    "query": "query ($repoName: String!, $repoOwner: String!) { repository(name: $repoName, owner: $repoOwner) { vulnerabilityAlerts(first: 100) { edges { node { securityAdvisory { vulnerabilities { nodes { package { name } severity } } } } } } } }",
    "variables": {
        "repoName": "'"$REPO"'",
        "repoOwner": "centralcordoba"
    }
}' https://api.github.com/graphql)

# Verificar si la respuesta contiene vulnerabilidades
if echo "$DATA" | grep -q "vulnerabilityAlerts"; then
    # Procesar los datos y añadirlos al archivo CSV
    # (Ajusta conforme a tus necesidades y la estructura exacta de los datos de la API)
    echo "$DATA" | jq -r --arg REPO "$REPO" '.data.repository.vulnerabilityAlerts.edges[].node.securityAdvisory.vulnerabilities.nodes[] | "\($REPO),\(.package.name),\(.severity)"' >> vulnerabilities.csv
else
    echo "No vulnerabilities found for $REPO"
fi

    
done

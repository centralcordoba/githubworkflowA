#!/bin/bash

# Asegurarte de que GH_TOKEN esté disponible
if [[ -z "$GH_TOKEN" ]]; then
  echo "ERROR: El token de GitHub no está establecido."
  exit 1
fi

REPOS=("centralcordoba/githubworkflowA" "centralcordoba/MarvelAngular")

echo "Repository,Vulnerability Name,Severity,Description" > vulnerabilities.csv

# Iterar sobre cada repositorio
for REPO in "${REPOS[@]}"; do
  
  # Hacer una llamada a la API y guardar los datos
  VULN_DATA=$(curl -s -H "Authorization: token $GH_TOKEN" \
               -H "Accept: application/vnd.github.v4+json" \
               "https://api.github.com/repos/$REPO/vulnerability-alerts")
  
  # Verificar si la API devolvió un mensaje de error y manejarlo
  if echo "$VULN_DATA" | jq -e 'has("message")' &> /dev/null; then
    ERROR_MESSAGE=$(echo "$VULN_DATA" | jq -r '.message')
    echo "ERROR: API returned error for $REPO: $ERROR_MESSAGE"
    continue  # Ir al siguiente repositorio si hubo un error
  fi
  
  # Obtener el número de vulnerabilidades y verificar que es un número
  VULN_COUNT=$(echo "$VULN_DATA" | jq '. | length')
  if ! [[ "$VULN_COUNT" =~ ^[0-9]+$ ]]; then
    echo "ERROR: No se pudo determinar la cantidad de vulnerabilidades para $REPO."
    continue  # Ir al siguiente repositorio si hubo un error
  fi
  
  # Si no hay vulnerabilidades, ir al siguiente repositorio
  if (( VULN_COUNT == 0 )); then
    continue
  fi
  
  # Procesar cada vulnerabilidad
  for (( i=0; i<VULN_COUNT; i++ )); do
    
    # Extraer los datos relevantes de la vulnerabilidad
    VULN_NAME=$(echo "$VULN_DATA" | jq -r ".[$i].name")
    VULN_SEVERITY=$(echo "$VULN

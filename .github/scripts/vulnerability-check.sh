#!/bin/bash

# Verificar si el token de GitHub está presente
if [[ -z "$GH_TOKEN" ]]; then
  echo "ERROR: El token de GitHub no está establecido."
  exit 1
fi

# Lista de repositorios a verificar
REPOS=("centralcordoba/githubworkflowA" "centralcordoba/MarvelAngular")

# Crear un archivo CSV para almacenar los datos de vulnerabilidades
echo "Repository,Vulnerability Name,Severity,Description" > vulnerabilities.csv

# Loop a través de cada repositorio para verificar vulnerabilidades
for REPO in "${REPOS[@]}"; do
  # Obtener vulnerabilidades usando la API de GitHub
  VULN_DATA=$(curl -s -H "Authorization: token $GH_TOKEN" \
               -H "Accept: application/vnd.github.v4+json" \
               "https://api.github.com/repos/$REPO/vulnerability-alerts")
  
  # Verificar si la API ha retornado un mensaje de error
  if echo "$VULN_DATA" | jq -e 'has("message")' &> /dev/null; then
    ERROR_MESSAGE=$(echo "$VULN_DATA" | jq -r '.message')
    echo "ERROR: API returned error for $REPO: $ERROR_MESSAGE"
    continue  # Saltar al siguiente repositorio en caso de error
  fi

  # Procesar los datos
  # NOTA: La estructura exacta de los datos dependerá de la API.
  VULN_COUNT=$(echo "$VULN_DATA" | jq '. | length')
  
  # Si VULN_COUNT es 0 o null,

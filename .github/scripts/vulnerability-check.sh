#!/bin/bash

# Comprobando si el token de GitHub está establecido
if [[ -z "${SECURITY_GITHUB}" ]]; then
    echo "ERROR: El token de GitHub no está establecido."
    exit 1
fi

# Lista de repositorios para comprobar
REPOSITORIES=("githubworkflowB" "githubworkflowA")

# Crear/Clear el archivo CSV
echo "Repository,Vulnerability Name,Severity,Package Name,Package Version" > vulnerabilities.csv

# Bucle a través de cada repositorio y recuperar las vulnerabilidades
for REPO in "${REPOSITORIES[@]}"; do
    echo "Checking $REPO"
    
    # Realiza una llamada API a GraphQL de GitHub
    DATA=$(curl -s -H "Authorization: bearer $SECURITY_GITHUB" -X POST -d '{
        "query": "query ($repoName: String!, $repoOwner: String!) { repository(name: $repoName, owner: $repoOwner) { vulnerabilityAlerts(first: 100) { edges { node { vulnerableManifestPath vulnerableManifestFilename vulnerableRequirements { id } vulnerableVersionRange firstPatchedVersion { identifier } securityVulnerability { package { name } severity advisory { description } vulnerabilities { severity } } } } } } }",
        "variables": {
            "repoName": "'"$REPO"'",
            "repoOwner": "centralcordoba"
        }
    }' https://api.github.com/graphql)
    
    # Imprime la respuesta de la API para depuración
    echo "API Response: $DATA"
    
    # Verificar si la respuesta contiene vulnerabilidades
    if echo "$DATA" | grep -q "vulnerabilityAlerts"; then
        # Procesar los datos y añadirlos al archivo CSV
        # (Este es un ejemplo, ajusta conforme a tus necesidades y la estructura exacta de los datos de la API)
        echo "$DATA" | jq -r --arg REPO "$REPO" '.data.repository.vulnerabilityAlerts.edges[] | "\($REPO),\(.node.securityVulnerability.advisory.description),\(.node.securityVulnerability.severity),\(.node.securityVulnerability.package.name),\(.node.vulnerableVersionRange)"' >> vulnerabilities.csv
    else
        echo "No vulnerabilities found for $REPO"
    fi
    
done

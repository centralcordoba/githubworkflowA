#!/bin/bash

# Verificación del token de GitHub
if [[ -z "${SECURITY_GITHUB}" ]]; then
    echo "ERROR: El token de GitHub no está establecido."
    exit 1
fi

# Repositorios a comprobar
REPOSITORIES=("githubworkflowB" "githubworkflowA" "MarvelAngular" "rickymortyReactjs")

# Creación del archivo CSV y ubicación
OUTPUT_FILE=".github/scripts/vulnerabilities.csv"
echo "Repository,Vulnerability Name,Severity,Package Name,Package Version" > "$OUTPUT_FILE"

# Bucle para revisar cada repositorio
for REPO in "${REPOSITORIES[@]}"; do
    echo "Checking $REPO"
    
    # Ejemplo de consulta GraphQL (esto debe ajustarse según tus necesidades)
    DATA=$(curl -s -H "Authorization: bearer $SECURITY_GITHUB" -X POST -d '{
    "query": "query ($repoName: String!, $repoOwner: String!) { repository(name: $repoName, owner: $repoOwner) { vulnerabilityAlerts(first: 100) { edges { node { securityAdvisory { vulnerabilities { nodes { package { name } severity } } } } } } } }",
    "variables": {
        "repoName": "'"$REPO"'",
        "repoOwner": "[TU_USUARIO_O_ORG_GITHUB]"
    }
}' https://api.github.com/graphql)

    echo "API Response: $DATA"

    # Verificación de respuesta de la API
    if echo "$DATA" | grep -q "vulnerabilityAlerts"; then
        # Procesamiento de datos y añadidura al CSV (ajusta según la estructura exacta de tus datos)
        echo "$DATA" | jq -r --arg REPO "$REPO" '.data.repository.vulnerabilityAlerts.edges[].node.securityAdvisory.vulnerabilities.nodes[] | "\($REPO),\(.package.name),\(.severity)"' >> "$OUTPUT_FILE"
    else
        echo "No vulnerabilities found for $REPO"
    fi
done

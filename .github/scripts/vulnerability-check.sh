#!/bin/bash

# Comprobando si el token de GitHub está establecido
if [[ -z "${GH_TOKEN}" ]]; then
    echo "ERROR: El token de GitHub no está establecido."
    exit 1
fi

# Lista de repositorios para comprobar
REPOS=("centralcordoba/githubworkflowA" "centralcordoba/MarvelAngular")

# Crear/Clear el archivo CSV
echo "Repository,Vulnerability Name,Severity,Package Name,Package Version" > vulnerabilities.csv

# Función para obtener y mostrar vulnerabilidades de un repositorio.
get_vulnerabilities() {
    REPO=$1
    
    # Crear la consulta GraphQL
    QUERY="{\"query\": \"query { repository(owner: \\\"${REPO%/*}\\\", name: \\\"${REPO#*/}\\\") { vulnerabilities(first: 100, orderBy: {field: UPDATED_AT, direction: DESC}) { edges { node { advisory { description severity } vulnerableRequirements { edges { node { package { name } } } } firstPatchedVersion { identifier } } } } } }\"}"
    
    # Llamada a la API de GraphQL
    VULN_DATA=$(curl -s -H "Authorization: bearer $GH_TOKEN" \
        -X POST -d "$QUERY" \
        https://api.github.com/graphql)
    
    # Procesar y exportar los datos (Aquí puedes utilizar jq para parsear y exportar los datos al CSV, similar al ejemplo previo)
    # Añadir los datos al archivo CSV
    
    # Este es solo un esqueleto para indicarte cómo acceder y procesar las vulnerabilidades.
    # Deberás expandir esto para extraer la información que necesitas de $VULN_DATA y añadirla al CSV.
    echo "$REPO, Example_Vuln_Name, Example_Severity, Example_Pkg_Name, Example_Pkg_Ver" >> vulnerabilities.csv
}

# Bucle a través de cada repositorio y recuperar las vulnerabilidades
for REPO in "${REPOSITORIES[@]}"; do
    echo "Checking $REPO"
    get_vulnerabilities $REPO
done
